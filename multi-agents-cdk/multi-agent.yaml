Resources:
  MyVpcF9F0CA6F:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: MultiAgentsCdkStack/MyVpc
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/Resource
  MyVpcpublicsubnet1Subnet1SubnetB342DAEA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public-subnet-1
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet1
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet1/Subnet
  MyVpcpublicsubnet1Subnet1RouteTable6ED9DE4D:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet1
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet1/RouteTable
  MyVpcpublicsubnet1Subnet1RouteTableAssociation2D492E70:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcpublicsubnet1Subnet1RouteTable6ED9DE4D
      SubnetId:
        Ref: MyVpcpublicsubnet1Subnet1SubnetB342DAEA
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet1/RouteTableAssociation
  MyVpcpublicsubnet1Subnet1DefaultRoute9372778D:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
      RouteTableId:
        Ref: MyVpcpublicsubnet1Subnet1RouteTable6ED9DE4D
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet1/DefaultRoute
  MyVpcpublicsubnet1Subnet2SubnetA15F55D6:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public-subnet-1
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet2
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet2/Subnet
  MyVpcpublicsubnet1Subnet2RouteTable7849C9FE:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet2
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet2/RouteTable
  MyVpcpublicsubnet1Subnet2RouteTableAssociation61069E05:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcpublicsubnet1Subnet2RouteTable7849C9FE
      SubnetId:
        Ref: MyVpcpublicsubnet1Subnet2SubnetA15F55D6
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet2/RouteTableAssociation
  MyVpcpublicsubnet1Subnet2DefaultRoute6DF07316:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
      RouteTableId:
        Ref: MyVpcpublicsubnet1Subnet2RouteTable7849C9FE
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/public-subnet-1Subnet2/DefaultRoute
  MyVpcIGW5C4A4F63:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MultiAgentsCdkStack/MyVpc
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/IGW
  MyVpcVPCGW488ACE0D:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: MyVpcIGW5C4A4F63
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/VPCGW
  MyVpcRestrictDefaultSecurityGroupCustomResourceA4FCCD62:
    Type: Custom::VpcRestrictDefaultSG
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E
          - Arn
      DefaultSecurityGroupId:
        Fn::GetAtt:
          - MyVpcF9F0CA6F
          - DefaultSecurityGroup
      Account: "054719795948"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyVpc/RestrictDefaultSecurityGroupCustomResource/Default
  CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                Resource:
                  - Fn::Join:
                      - ""
                      - - arn:aws:ec2:us-west-2:054719795948:security-group/
                        - Fn::GetAtt:
                            - MyVpcF9F0CA6F
                            - DefaultSecurityGroup
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role
  CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-054719795948-us-west-2
        S3Key: 7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200.zip
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
          - Arn
      Runtime: nodejs20.x
      Description: Lambda function for removing all inbound/outbound rules from the VPC default security group
    DependsOn:
      - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler
      aws:asset:path: asset.7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200
      aws:asset:property: Code
  MySecurityGroupAC8D442C:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MultiAgentsCdkStack/MySecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow SSH access
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          Description: Allow access to port 8000 from anywhere
          FromPort: 8000
          IpProtocol: tcp
          ToPort: 8000
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MySecurityGroup/Resource
  MultiAgentsStorageECB00475:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: multi-agents-storage-custom
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/Multi_Agents_Storage/Resource
  MultiAgentsStoragePolicy7336D503:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: MultiAgentsStorageECB00475
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - MultiAgentsStorageECB00475
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - MultiAgentsStorageECB00475
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/Multi_Agents_Storage/Policy/Resource
  MultiAgentsStorageAutoDeleteObjectsCustomResource84BBE089:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: MultiAgentsStorageECB00475
    DependsOn:
      - MultiAgentsStoragePolicy7336D503
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/Multi_Agents_Storage/AutoDeleteObjectsCustomResource/Default
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-054719795948-us-west-2
        S3Key: faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip
      Timeout: 900
      MemorySize: 128
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs20.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: MultiAgentsStorageECB00475
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6
      aws:asset:property: Code
  EC2InstanceRole0BAA8CDD:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/EC2InstanceRole/Resource
  EC2InstanceRoleDefaultPolicy6E0BF0D9:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - MultiAgentsStorageECB00475
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - MultiAgentsStorageECB00475
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: EC2InstanceRoleDefaultPolicy6E0BF0D9
      Roles:
        - Ref: EC2InstanceRole0BAA8CDD
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/EC2InstanceRole/DefaultPolicy/Resource
  MyCfnKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: cdk-ec2-key-pair-med
      Tags:
        - Key: key
          Value: value
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyCfnKeyPair
  MyInstanceInstanceProfile2784C631:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2InstanceRole0BAA8CDD
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyInstance/InstanceProfile
  MyInstanceA12EC128:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-west-2a
      IamInstanceProfile:
        Ref: MyInstanceInstanceProfile2784C631
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.medium
      KeyName: cdk-ec2-key-pair-med
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - Fn::GetAtt:
                - MySecurityGroupAC8D442C
                - GroupId
          SubnetId:
            Ref: MyVpcpublicsubnet1Subnet1SubnetB342DAEA
      Tags:
        - Key: Name
          Value: MultiAgentsCdkStack/MyInstance
      UserData:
        Fn::Base64: "#!/bin/bash"
    DependsOn:
      - EC2InstanceRoleDefaultPolicy6E0BF0D9
      - EC2InstanceRole0BAA8CDD
      - MyVpcpublicsubnet1Subnet1DefaultRoute9372778D
      - MyVpcpublicsubnet1Subnet1RouteTableAssociation2D492E70
      - MyVpcpublicsubnet1Subnet2DefaultRoute6DF07316
      - MyVpcpublicsubnet1Subnet2RouteTableAssociation61069E05
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/MyInstance/Resource
  DockerLambdaServiceRoleFB7B439F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/DockerLambda/ServiceRole/Resource
  DockerLambda14243288:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri:
          Fn::Sub: 054719795948.dkr.ecr.us-west-2.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-054719795948-us-west-2:5ffa9a17fbb5486ab493105d5bd16fbed1277e33d9f56279d0f55c63e99b0955
      FunctionName: DockerLambdaFunction
      PackageType: Image
      Role:
        Fn::GetAtt:
          - DockerLambdaServiceRoleFB7B439F
          - Arn
    DependsOn:
      - DockerLambdaServiceRoleFB7B439F
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/DockerLambda/Resource
      aws:asset:path: asset.5ffa9a17fbb5486ab493105d5bd16fbed1277e33d9f56279d0f55c63e99b0955
      aws:asset:dockerfile-path: Dockerfile
      aws:asset:property: Code.ImageUri
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/3VPQW7CMBB8C3fjtnCgV6AqQj3USiquaGMW2Ca2I3tdFEX5e+UkNFWlnnZmdrzjWcin1Uo+zuAW5vpUzisqZJsz6FLALRxb1AvZHmottmd7UFuhYlGRzmNhkZM2ocxFxg8oKpz0SVuH4DQBk7M/5gT2ltFb5B0w3qAZY0a2ZgZ9NWhZ5KijJ2523sW6D/grvGGjgLzY28Bg9Xh9wJ0IS9luoi6Hv45oGMpVpJtJHngnCIxsMzf06efknNA9Qnl3pgo7UYEpTiDbF6dL9HsDF3yNVt+b33EnUPsjhIAc5C/vOilpJzOsXSB2vtlAwE5kGFz0qVgM7MxEz/aflfLui07o03vRH84ZLmQvfQXwYJDRJ/IeuY7cCdXw1dmHpXxayOfZZyCa+2iZDMpsmN/GlaF+MQIAAA==
    Metadata:
      aws:cdk:path: MultiAgentsCdkStack/CDKMetadata/Default
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Outputs:
  BucketName:
    Description: Name of the S3 bucket
    Value:
      Ref: MultiAgentsStorageECB00475
  InstanceId:
    Description: Instance ID of the EC2 instance
    Value:
      Ref: MyInstanceA12EC128
  InstanceRoleArn:
    Description: IAM Role ARN for the EC2 instance
    Value:
      Fn::GetAtt:
        - EC2InstanceRole0BAA8CDD
        - Arn

